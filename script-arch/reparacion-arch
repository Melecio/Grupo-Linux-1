#!/bin/bash
#===================================================================================
#
# ARCHIVO: reparacion-arch.sh
#
# USO: reparacion-arch [-u] [-i]
#
# DESCRICIÓN: Este script es usado en casos en los que se necesita reparar una 
#             máquina usando el live CD de Arch Linux. Configura la red, apaga el 
#             molesto módulo PCSPKR y te permite revisar qué tiene cada partición y 
#             luego montarlas que se quieran.
#
# REQUERIMIENTOS: Una máquina con unidad de CD y un live CD de Arch Linux
# NOTAS: Faltaría agregar opciones apra el mount --bind y mejorar el flujo de updates
# AUTORES: MP
# COMPAÑÍA: Grupo Linux 1 - USB
# VERSION: 1.0
# CREADO: 8.3.2012 - 2:35 AM
# REVISION: 12.03.2012
#==================================================================================


#---------------------------------------------------------------------------------
# Opciones del script, i para configurar manualmente el ip y u para no updates
#---------------------------------------------------------------------------------
while getopts :iu OPT; do
    case $OPT in
        i|+i)
            manual=1
            ;;
        u|+u)
            noUpdate=1
            ;;
        *)
            echo "usage: ${0##*/} [+-i} [--] ARGS..."
            exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1


#=== FUNCIÓN ==================================================================
# NOMBRE: instalar
# DESCRIPCIÓN: Instala paquetes cuyos nombres se pasen como argumento
#==============================================================================
function instalar() {
    for i in $(seq 1 $#); do
        eval pacman -S --noconfirm  \${$i}
    done
}

#=== FUNCIÓN ==================================================================
# NOMBRE: Apagra Módulo
# DESCRIPCIÓN: Elimina los módulos que se pasen como argumento.
#==============================================================================
function apagarModulo() {
    rmmod $1 2>/dev/null
}



#=== FUNCIÓN ==================================================================
# NOMBRE: Red por dchp
# DESCRIPCIÓN: Configura los parametros de la red usando dhcpcd usando como ar-
#              gumento la interfaz que se desea configurar.
#==============================================================================
function redPorDchp() {
    ifconfig $1 up
    dhcpcd $1
}


#=== FUNCIÓN ==================================================================
# NOMBRE: Red manual
# DESCRIPCIÓN: Permite la configuración de la red de manera manual, útil para
#              casos en los que no se tenga un servidor DHCP. Se pasan como ar-
#              gumento la interfaz que se quiera configurar y la función le pi-
#              al usuario el ip, la gateway, el search y el DNS.
#==============================================================================
function redManual() {
    echo "Ingrese el ip deseado"
    read ip
    ifconfig $1 $ip
    echo "Ingrese la puerta de enlace"
    read gateway
    route add default gw $gateway $1
    echo "Ingrese el search y el dns con un espacio de por medio:"
    read srch dns
    echo $srch >> /etc/resolv.conf
    echo "nameserver " $dns >> /etc/resolv.conf
}
    
#=== FUNCIÓN ==================================================================
# NOMBRE: Montar Particiones
# DESCRIPCIÓN: Hace una lista del contenido de las particiones montándolas pre-
#              ventivamente en /temp.
#==============================================================================
function montarParticiones() {
    lista=$(sfdisk -d | awk '/dev/{print $1}' | grep /dev/)
    mkdir /tmp/dev
    for i in $lista; do
        eval mkdir /tmp\$i 2>/dev/null
        mount $i /tmp/$i
        echo "El contenido en " $i " es: "
        eval ls /tmp\$i 2>/dev/null
        echo -e "\n"
        umount $i /tmp/\$i 2>/dev/null
    done
}

#=== FUNCIÓN ==================================================================
# NOMBRE: Montar Particiones
# DESCRIPCIÓN: Permite montar las particiones una vez que se conocen las ubica-
#              ciones e /dev/*, además, permite montar las particiones deseadas
#              en ubicaciones específicas.
#==============================================================================
function seleccionarParticion() {
    declare -i sigue=0
    echo "¿Desea montar alguna partición? [y/n]"
        
    until [[ "$respuesta" == "y" || "$respuesta" == "n" ]]; do
        echo "Ingrese y para sí y n para no"
        read respuesta
    done
    if [ "$respuesta" == "y" ]; then
        sigue=1
    elif [ "$respuesta" == "n" ]; then
        sigue=0
    fi
        
    while [ "$sigue" == "1" ]; do 
        echo "¿Cuál partición desea montar?"
        read particion
        
        echo "¿En dónde desea montarla?"
        read lugar
        if [ -a $lugar ]; then
            $true
        else
            mkdir $lugar
        fi
        mount /dev/$particion $lugar 
        
        echo "¿Desea montar otra partición? [y/n]"
        until [[ "$resp" == "y" || "$resp" == "n" ]]; do
            echo "Intrese y para sí o n para no"
            read resp
        done
        
        if [ "$resp" == "y" ]; then
            $true
        elif [ "$resp" == "n" ]; then
            break
        fi
     done

 }


#---------------------------------------------------------------------------------
# Se comprueba si se configurará la red manual o por DHCP.
#---------------------------------------------------------------------------------
if test $manual ; then
    redManual "eth0"
else
    redPorDchp "eth0"
fi

#---------------------------------------------------------------------------------
# Se comprueba si actualizará el Arch Linux.
#---------------------------------------------------------------------------------
if test $noUpdate ; then
    $true
else
    pacman -Syy   
fi

#---------------------------------------------------------------------------------
# Estructura principal del programa
#---------------------------------------------------------------------------------
instalar "rsync" "openssh" "screen" "cowsay"                 
rc.d restart sshd 
apagarModulo "pcspkr"
montarParticiones
seleccionarParticion
cowsay -f tux DEBIAN RULES                             # jeje